using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;

namespace ecommerce.CamadaAcessoBanco
{
    public class MySQLPersistencia
    {
        MySqlConnection _con;
        MySqlCommand _cmd;

        int _ultimoId;

        public int UltimoId { get => _ultimoId; set => _ultimoId = value; }

        public MySQLPersistencia()
        {
            //string strCon = "Server=den1.mysql6.gear.host;Database=dbfipplp4;Uid=dbfipplp4;Pwd=Ia6SJ_!T4r50;";
            string strCon = System.Environment.GetEnvironmentVariable("MYSQLSTRCON");

            _con = new MySqlConnection(strCon);
            _cmd = _con.CreateCommand();
        }

        public void Abrir()
        {
            try
            {
                if(_con.State != System.Data.ConnectionState.Open)
                {
                    _con.Open();
                }
            }
            catch(Exception ex)
            {

            }
        }

        public void Fechar()
        {
            _con.Close();
            _cmd.Parameters.Clear();
        }

        public DataTable ExecutarSelect(string select, Dictionary<string, object> param = null)
        {
            Abrir();
            _cmd.CommandText = select;
            DataTable dt = new DataTable();

            if(param != null)
            {
                foreach(var p in param)
                {
                    _cmd.Parameters.AddWithValue(p.Key, p.Value);
                }
            }

            try
            {
                dt.Load(_cmd.ExecuteReader());
            }
            catch(Exception ex)
            {

            }

            Fechar();

            return dt;
        }

        public int ExecuteNonQuery(string sql, Dictionary<string, object> param = null, 
            Dictionary<string, byte[]> parametrosBinarios = null)
        {
            int qntdLinhas = 0;

            Abrir();

            _cmd.CommandText = sql;

            if(param != null)
            {
                foreach(var p in param)
                {
                    _cmd.Parameters.AddWithValue(p.Key, p.Value);
                }
            }

            if (parametrosBinarios != null)
            {
                foreach (var p in parametrosBinarios)
                {
                    _cmd.Parameters.Add(p.Key, MySqlDbType.Blob);
                    _cmd.Parameters[p.Key].Value = p.Value;
                }
            }


            try
            {
                qntdLinhas = _cmd.ExecuteNonQuery();
                _ultimoId = (int) _cmd.LastInsertedId;
            }
            catch(Exception ex)
            {

            }

            Fechar();

            return qntdLinhas;
        }

        public object ExecutarScalar(string sql, Dictionary<string, object> parametros = null, Dictionary<string, byte[]> parametrosBinarios = null)
        {
            Abrir();
            _cmd.CommandText = sql;

            if (parametros != null)
            {
                foreach (var p in parametros)
                {
                    _cmd.Parameters.AddWithValue(p.Key, p.Value);
                }
            }

            if (parametrosBinarios != null)
            {
                foreach (var p in parametrosBinarios)
                {
                    _cmd.Parameters.Add(p.Key, MySqlDbType.Blob);
                    _cmd.Parameters[p.Key].Value = p.Value;
                }
            }


            object retorno = null;
            
            try
            {
                retorno = _cmd.ExecuteScalar();
                _ultimoId = (int)_cmd.LastInsertedId;
            }
            catch(Exception ex)
            {

            }

            Fechar();

            return retorno;
        }
    }
}


/*
 * 
    * email:
    EMAIL: trabalho_lp4@protonmail.ch
    SENHA: fipp!123
    
    -- MySQL Script generated by MySQL Workbench
-- Mon Jun 22 23:08:43 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema dbfipplp4
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `dbfipplp4` ;

-- -----------------------------------------------------
-- Schema dbfipplp4
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `dbfipplp4` DEFAULT CHARACTER SET utf8 ;
USE `dbfipplp4` ;

-- -----------------------------------------------------
-- Table `dbfipplp4`.`categoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dbfipplp4`.`categoria` (
  `cod` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`cod`),
  UNIQUE INDEX `descricao_UNIQUE` (`nome` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 14
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `dbfipplp4`.`produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dbfipplp4`.`produto` (
  `cod` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NULL DEFAULT NULL,
  `descricao` VARCHAR(255) NULL DEFAULT NULL,
  `valor` DECIMAL(8,2) NULL DEFAULT NULL,
  `estoque` INT(11) NOT NULL,
  `estrelas` INT(11) NULL DEFAULT NULL,
  `categoria_cod` INT(11) NOT NULL,
  PRIMARY KEY (`cod`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC) VISIBLE,
  INDEX `fk_produto_categoria_idx` (`categoria_cod` ASC) VISIBLE,
  CONSTRAINT `fk_produto_categoria`
    FOREIGN KEY (`categoria_cod`)
    REFERENCES `dbfipplp4`.`categoria` (`cod`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 79
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `dbfipplp4`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dbfipplp4`.`usuario` (
  `cod` INT(11) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(30) NOT NULL,
  `password` VARCHAR(30) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `dataNasc` VARCHAR(45) NOT NULL,
  `cpf` CHAR(11) NOT NULL,
  `end_rua` VARCHAR(45) NOT NULL,
  `end_num` INT(11) NOT NULL,
  `end_cep` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`cod`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `dbfipplp4`.`fotos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dbfipplp4`.`fotos` (
  `numero` INT NOT NULL,
  `foto` LONGBLOB NOT NULL,
  `produto_cod` INT(11) NOT NULL,
  PRIMARY KEY (`produto_cod`, `numero`),
  CONSTRAINT `fk_fotos_produto1`
    FOREIGN KEY (`produto_cod`)
    REFERENCES `dbfipplp4`.`produto` (`cod`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;







    ========================================================================================
    OLDDDDDDDDDDDD


    drop table produto;
drop table categoria;
drop table usuario;


CREATE TABLE IF NOT EXISTS categoria (
  `cod` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`cod`),
  UNIQUE INDEX `descricao_UNIQUE` (`nome` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


CREATE TABLE IF NOT EXISTS produto (
  `cod` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NULL DEFAULT NULL,
  `descricao` VARCHAR(255) NULL DEFAULT NULL,
  `valor` DECIMAL(8,2) NULL DEFAULT NULL,
  `estoque` INT(11) NOT NULL,
  `estrelas` INT(11) NULL DEFAULT NULL,
  `categoria_cod` INT(11) NOT NULL,
  PRIMARY KEY (`cod`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC) ,
  INDEX `fk_produto_categoria_idx` (`categoria_cod` ASC),
  CONSTRAINT `fk_produto_categoria`
    FOREIGN KEY (`categoria_cod`)
    REFERENCES `categoria` (`cod`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


CREATE TABLE IF NOT EXISTS usuario (
  `cod` INT(11) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(30) NOT NULL,
  `password` VARCHAR(30) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `dataNasc` VARCHAR(45) NOT NULL,
  `cpf` CHAR(11) NOT NULL,
  `end_rua` VARCHAR(45) NOT NULL,
  `end_num` INT(11) NOT NULL,
  `end_cep` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`cod`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


    ALTER TABLE `dbfipplp4`.`produto` 
    ADD COLUMN `foto1` BLOB NOT NULL AFTER `categoria_cod`,
    ADD COLUMN `foto2` BLOB NOT NULL AFTER `foto1`;


  insert into categoria (nome) values("Informática");
    insert into categoria (nome) values("Doméstico");
    insert into categoria (nome) values("Eletrodoméstico");
    insert into categoria (nome) values("Eletroeletrônico");
    insert into categoria (nome) values("Móveis");
    insert into categoria (nome) values("Cozinha");
     
     */
